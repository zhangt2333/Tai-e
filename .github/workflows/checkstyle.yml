name: Checkstyle
on:
  pull_request:

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        continue-on-error: true

      - name: Comment Checkstyle Results on PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            // Find all checkstyle XML files
            const xmlFiles = execSync("find . -path '*/build/reports/checkstyle/*.xml' -type f", { encoding: 'utf-8' })
              .trim()
              .split('\n')
              .filter(f => f);

            let hasErrors = false;

            for (const xmlFile of xmlFiles) {
              if (!fs.existsSync(xmlFile)) continue;

              const content = fs.readFileSync(xmlFile, 'utf-8');

              // Simple XML parsing with regex
              const fileMatches = content.matchAll(/<file name="([^"]+)">([\s\S]*?)<\/file>/g);

              for (const fileMatch of fileMatches) {
                const fileName = fileMatch[1].replace(process.cwd() + '/', '');
                const fileContent = fileMatch[2];

                const errorMatches = fileContent.matchAll(/<error line="(\d+)"[^>]*source="([^"]+)"[^>]*message="([^"]+)"/g);

                for (const errorMatch of errorMatches) {
                  hasErrors = true;
                  const line = parseInt(errorMatch[1]);
                  const source = errorMatch[2];
                  const message = errorMatch[3];

                  // Extract just the check class name
                  const checkName = source.split('.').pop();

                  // Create the comment body
                  const body = `⚠️ **[checkstyle]**: ${message} (corresponding rule is ${checkName})`;

                  try {
                    await github.rest.pulls.createReviewComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.issue.number,
                      body: body,
                      path: fileName,
                      line: line,
                      side: 'RIGHT',
                      commit_id: context.payload.pull_request.head.sha
                    });
                  } catch (e) {
                    console.log(`Could not post comment on ${fileName}:${line}: ${e.message}`);
                  }
                }
              }
            }

            if (hasErrors) {
              core.setFailed('Checkstyle violations found');
            }
