name: Checkstyle
on:
  pull_request:

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        continue-on-error: true

      - name: Comment Checkstyle Results on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            const { JSDOM } = require('jsdom');

            console.log('Starting Checkstyle Results Processing');

            // Find all checkstyle XML files
            let xmlFiles = [];
            try {
              const findResult = execSync("find . -path '*/build/reports/checkstyle/*.xml' -type f", { encoding: 'utf-8' });
              xmlFiles = findResult
                .trim()
                .split('\n')
                .filter(f => f);
              console.log(`Found ${xmlFiles.length} checkstyle XML files`);
            } catch (e) {
              console.error('Error finding XML files:', e.message);
              return;
            }

            if (xmlFiles.length === 0) {
              console.log('No checkstyle XML files found');
              return;
            }

            let hasErrors = false;
            let totalErrors = 0;
            let successfulComments = 0;
            let failedComments = 0;

            for (const xmlFile of xmlFiles) {
              console.log(`Processing: ${xmlFile}`);

              if (!fs.existsSync(xmlFile)) {
                console.log(`File does not exist: ${xmlFile}`);
                continue;
              }

              const content = fs.readFileSync(xmlFile, 'utf-8');
              const dom = new JSDOM(content, { contentType: 'text/xml' });
              const document = dom.window.document;

              // Get all file elements
              const fileElements = document.querySelectorAll('file');

              for (const fileElement of fileElements) {
                const fullFileName = fileElement.getAttribute('name');
                if (!fullFileName) continue;

                // Make path relative to repository root
                const fileName = fullFileName
                  .replace(process.cwd() + '/', '')
                  .replace(/^\//, '');

                // Get all error elements within this file
                const errorElements = fileElement.querySelectorAll('error');

                if (errorElements.length > 0) {
                  console.log(`  File: ${fileName} (${errorElements.length} errors)`);
                }

                for (const errorElement of errorElements) {
                  const line = errorElement.getAttribute('line');
                  const column = errorElement.getAttribute('column');
                  const message = errorElement.getAttribute('message');
                  const source = errorElement.getAttribute('source');
                  const severity = errorElement.getAttribute('severity');

                  if (!line || !message || !source) {
                    console.log('    Skipping error due to missing attributes');
                    continue;
                  }

                  hasErrors = true;
                  totalErrors++;

                  const lineNum = parseInt(line);

                  // Extract just the check class name
                  const checkName = source.split('.').pop();

                  // Create the comment body
                  const body = `‚ö†Ô∏è **[checkstyle]** <${checkName}> ${message}`;

                  console.log(`    Line ${lineNum}: ${checkName}`);

                  try {
                    await github.rest.pulls.createReviewComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.issue.number,
                      body: body,
                      path: fileName,
                      line: lineNum,
                      side: 'RIGHT',
                      commit_id: context.payload.pull_request.head.sha
                    });
                    successfulComments++;
                    console.log(`    ‚úì Comment posted`);
                  } catch (e) {
                    failedComments++;
                    console.log(`    ‚úó Failed: ${e.message}`);

                    // If line not in diff, post as general comment
                    if (e.status === 422) {
                      try {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: `${body}\n\nüìç File: \`${fileName}\` Line: ${lineNum}`
                        });
                        console.log(`    ‚úì Posted as PR comment`);
                        successfulComments++;
                        failedComments--;
                      } catch (e2) {
                        console.log(`    ‚úó PR comment also failed: ${e2.message}`);
                      }
                    }
                  }
                }
              }
            }

            console.log(`\nSummary: ${totalErrors} errors, ${successfulComments} posted, ${failedComments} failed`);

            if (hasErrors) {
              core.setFailed(`Checkstyle found ${totalErrors} violation(s)`);
            }
