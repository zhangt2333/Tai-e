name: Checkstyle
on:
  pull_request:

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        continue-on-error: true

      - name: Install dependencies
        run: npm install xml2js glob

      - name: Parse Checkstyle Reports and Comment on PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const xml2js = require('xml2js');
            const glob = require('glob');
            const util = require('util');

            const parser = new xml2js.Parser();
            const parseXml = util.promisify(parser.parseString);
            const globPromise = util.promisify(glob);

            async function run() {
              console.log('Starting to process checkstyle reports...');

              // Find all checkstyle XML reports
              const reportPaths = await globPromise('**/build/reports/checkstyle/*.xml');
              console.log(`Found ${reportPaths.length} checkstyle report files: ${reportPaths.join(', ')}`);

              if (reportPaths.length === 0) {
                console.log('No checkstyle reports found.');
                return;
              }

              let violationsCount = 0;
              const prSha = context.payload.pull_request.head.sha;
              console.log(`PR SHA: ${prSha}`);

              for (const reportPath of reportPaths) {
                console.log(`Processing report: ${reportPath}`);
                try {
                  const xmlContent = fs.readFileSync(reportPath, 'utf8');
                  console.log(`XML content loaded, length: ${xmlContent.length} bytes`);

                  const result = await parseXml(xmlContent);
                  console.log('XML parsed successfully');
                  console.log(`Parsed structure: ${JSON.stringify(result, null, 2)}`);

                  if (!result.checkstyle || !result.checkstyle.file) {
                    console.log('No violations found in this report or invalid format.');
                    continue;
                  }

                  for (const file of result.checkstyle.file) {
                    const fileName = file.$.name; // Get the file name from attributes
                    console.log(`Processing file: ${fileName}`);

                    // Skip if no errors
                    if (!file.error || file.error.length === 0) {
                      console.log(`No errors in file: ${fileName}`);
                      continue;
                    }

                    // Normalize the file path to be relative to the repository root
                    const repoPath = fileName.replace(/^.*\/src\//, 'src/');
                    console.log(`Normalized file path: ${repoPath}`);

                    for (const error of file.error) {
                      const lineNum = parseInt(error.$.line, 10);
                      const message = error.$.message;
                      const severity = error.$.severity;
                      const source = error.$.source;

                      console.log(`Found violation: ${severity} at line ${lineNum}: ${message}`);

                      // Create the comment body
                      const body = `:warning: **Checkstyle ${severity}**\n${message}\n\nSource: \`${source}\``;

                      try {
                        console.log(`Attempting to create comment for ${repoPath}:${lineNum}`);
                        console.log(`Comment body: ${body}`);

                        const response = await github.rest.pulls.createReviewComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: context.issue.number,
                          body: body,
                          path: repoPath,
                          line: lineNum,
                          side: 'RIGHT',
                          commit_id: prSha
                        });

                        console.log(`Comment created successfully. Response status: ${response.status}`);
                        violationsCount++;
                      } catch (commentError) {
                        console.error(`Failed to create comment for ${repoPath}:${lineNum}`);
                        console.error(`Error: ${commentError.message}`);
                        console.error(commentError.stack);

                        // If it fails with a specific error indicating the file/line isn't in the PR,
                        // we can try a fallback approach with a general PR comment
                        if (commentError.status === 422) {
                          console.log('File or line might not be part of the PR. Skipping this violation.');
                        }
                      }
                    }
                  }
                } catch (error) {
                  console.error(`Error processing report ${reportPath}: ${error.message}`);
                  console.error(error.stack);
                }
              }

              // Add a summary comment
              if (violationsCount > 0) {
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `:clipboard: Checkstyle found ${violationsCount} style violation(s) in this PR.`
                  });
                  console.log(`Created summary comment for ${violationsCount} violations`);
                } catch (error) {
                  console.error(`Failed to create summary comment: ${error.message}`);
                }
              } else {
                console.log('No style violations found to comment on.');
              }
            }

            run().catch(error => {
              console.error('Unhandled error in the script:');
              console.error(error.message);
              console.error(error.stack);
              process.exit(1);
            });
